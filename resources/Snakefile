import os
import sys; sys.path.append(os.getcwd())
from itertools import groupby
import csv
from subprocess import PIPE, Popen
from collections import defaultdict
from snakesupport import *

REPEATMASKER_IGNORE_CLASSES = 'tRNA snRNA scRNA srpRNA'.split()

GENOMES = ['mm10', 'hg19']
GENOME2SPECIES = {'mm10': 'Mus musculus', 'hg19': 'Homo sapiens'}
GENOME2SPECIES_SHORT = {'mm10': 'mmu', 'hg19': 'hsa'}
SUBDIRS = ['downloaded', 'tmp']

RFAM_FASTA_URL = 'ftp://ftp.sanger.ac.uk/pub/databases/Rfam/CURRENT/Rfam.fasta.gz'
RFAM_FULL_URL = 'ftp://ftp.sanger.ac.uk/pub/databases/Rfam/CURRENT/Rfam.fasta.gz'
GENOME_2BIT_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/bigZips/{genome}.2bit'
REFGENE_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/refGene.txt.gz'
REFFLAT_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/refFlat.txt.gz'
REFLINK_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/refLink.txt.gz'
KNOWNGENE_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/knownGene.txt.gz'
MIRBASE_URL = 'ftp://mirbase.org/pub/mirbase/CURRENT/genomes/{species}.gff3'
REPEATMASKER_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/rmsk.txt.gz'
TRNADB_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/tRNAs.txt.gz'
REFSEQALI_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/database/refSeqAli.txt.gz'
REFMRNA_URL = 'http://hgdownload.soe.ucsc.edu/goldenPath/{genome}/bigZips/refMrna.fa.gz'

GENBANK_EFETCH_URL = (
    'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore'
    '&id={gi}&rettype=fasta&retmode=text')
RDNA_GENBANK_URLS = {
    'Mus musculus': GENBANK_EFETCH_URL.format(gi=38176281),
    'Homo sapiens': GENBANK_EFETCH_URL.format(gi=555853),
}

# create directories when missing
for genome in GENOMES:
    for subdir in SUBDIRS:
        dirpath = os.path.join(genome, subdir)
        if not os.path.isdir(dirpath):
            os.makedirs(dirpath)

rule all:
    input: expand('{genome}/contaminants/contaminants.genomecomp', genome=GENOMES), \
           expand('{genome}/genome/genome.maps/genome.splicesites.iit', genome=GENOMES), \
           expand('{genome}/nrRefSeq-genome.bed.gz', genome=GENOMES), \
           expand('{genome}/annotations.bed.gz', genome=GENOMES), \
           expand('{genome}/nrRefSeq-alignment.db', genome=GENOMES), \
           expand('{genome}/nrRefSeq.fa.fai', genome=GENOMES)


rule download_rfam_fasta:
    output: '{genome}/downloaded/Rfam.fasta.gz'
    shell: 'wget -O {output} {RFAM_FASTA_URL}'

rule download_rfam_full:
    output: '{genome}/downloaded/Rfam.full.gz'
    shell: 'wget -O {output} {RFAM_FULL_URL}'

rule download_rDNA:
    output: '{genome}/downloaded/rDNA.fa'
    run:
        url = RDNA_GENBANK_URLS[GENOME2SPECIES[wildcards.genome]]
        shell('wget -O "{output}" "{url}"')

rule rfam_rRNA_seq_names:
    input: '{genome}/downloaded/Rfam.fasta.gz'
    output: '{genome}/tmp/Rfam-rRNA-names'
    run:
        species = GENOME2SPECIES[wildcards.genome]
        shell("zgrep '^>.*rRNA.*{species}' {input} | sed -e 's,^>\([^ ]*\).*,\\1,g' > {output}")

rule make_contaminants_fasta:
    input: rDNA_fasta='{genome}/downloaded/rDNA.fa', \
           rfam_ids='{genome}/tmp/Rfam-rRNA-names', \
           rfam_fasta='{genome}/downloaded/Rfam.fasta.gz'
    output: '{genome}/contaminants.fa'
    shell: 'faSomeRecords {input.rfam_fasta} {input.rfam_ids} {output} && \
                (cat {input.rDNA_fasta} files/illumina.fa >> {output})'

rule build_contaminants_gsnap_index:
    input: '{genome}/contaminants.fa'
    output: '{genome}/contaminants/contaminants.genomecomp'
    shell: 'gmap_build -D {wildcards.genome} -d contaminants -k 12 -b 12 -q 1 {input}'

rule download_genome_sequence:
    output: twobit='{genome}/genome.2bit', fasta='{genome}/genome.fa', \
            fasta_index='{genome}/genome.fa.fai'
    run:
        genome = wildcards.genome
        shell('wget -O {output.twobit} ' + GENOME_2BIT_URL)
        shell('twoBitToFa {output.twobit} {output.fasta}')
        shell('samtools faidx {output.fasta}')

rule build_gsnap_genome_index:
    input: '{genome}/genome.fa'
    output: '{genome}/genome/genome.genomecomp'
    threads: 100 # never run multiple builds
    shell: 'gmap_build -D {wildcards.genome} -d genome -k 12 -b 12 -q 1 {input}'

rule download_refgene:
    output: '{genome}/downloaded/refGene.txt.gz'
    run:
        url = REFGENE_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {url}')

rule download_refflat:
    output: '{genome}/downloaded/refFlat.txt.gz'
    run:
        url = REFFLAT_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {url}')

rule download_reflink:
    output: '{genome}/downloaded/refLink.txt.gz'
    run:
        url = REFLINK_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {url}')

rule download_knowngene:
    output: '{genome}/downloaded/knownGene.txt.gz'
    run:
        url = KNOWNGENE_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {url}')

rule download_refseq_fasta:
    output: '{genome}/downloaded/refMrna.fa.gz'
    run:
        url = REFMRNA_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {url}')

rule download_refseqali:
    output: '{genome}/downloaded/refSeqAli.psl'
    run:
        url = REFSEQALI_URL.format(genome=wildcards.genome)
        shell('wget -O - {url} | gzip -d - | sed -n -e "s/^[0-9]*\t//p" > {output}')

rule build_refseqali_db:
    input: alignment='{genome}/downloaded/refSeqAli.psl', \
           nrlist='{genome}/nrRefSeq.list', \
           nrbed='{genome}/nrRefSeq-genome.bed.gz'
    output: '{genome}/nrRefSeq-alignment.db'
    run:
        shell('python tools/build-refSeqAli-database.py {input.nrlist} {input.nrbed} \
                    {input.alignment} {output}')

rule filter_refseq_fasta:
    input: fain='{genome}/downloaded/refMrna.fa.gz', \
           nrlist='{genome}/nrRefSeq.list'
    output: faout='{genome}/nrRefSeq.fa', faidx='{genome}/nrRefSeq.fa.fai'
    run:
        with TemporaryDirectory() as tmpdir:
            refmrnatmp = os.path.join(tmpdir, 'refMrna.fa')
            shell('gzip -cd {input.fain} > {refmrnatmp}')

            shell('faSomeRecords {refmrnatmp} {input.nrlist} {output.faout}')
            shell('samtools faidx {output.faout}')

rule build_gsnap_splice_index:
    input: refgene='{genome}/downloaded/refGene.txt.gz', \
           knowngene='{genome}/downloaded/knownGene.txt.gz', \
           gsnapidx='{genome}/genome/genome.genomecomp'
    output: '{genome}/genome/genome.maps/genome.splicesites.iit'
    shell: '(zcat {input.refgene} | psl_splicesites -s 1; \
             zcat {input.knowngene} | psl_splicesites) | iit_store -o {output}'

rule build_nonredundant_refseq_database:
    input: refflat='{genome}/downloaded/refFlat.txt.gz', \
           reflink='{genome}/downloaded/refLink.txt.gz'
    output: nrdb='{genome}/nrRefSeq.db', nrlist='{genome}/nrRefSeq.list'
    shell: 'zcat {input.refflat} | sort -t "\t" -k3,4 -k5,6n | \
            python tools/build-nonredundant-refseq.py {input.reflink} {output.nrdb} \
              {output.nrlist}'

rule make_nonredundant_refseq_genome_bedanno:
    input: '{genome}/nrRefSeq.db'
    output: '{genome}/nrRefSeq-genome.bed.gz'
    shell: 'python tools/nrrefseq2bed.py {input} | gzip -c - > {output}'

rule prepare_rfam_catalog:
    input: rfamfasta='{genome}/downloaded/Rfam.fasta.gz', \
           rfamfull='{genome}/downloaded/Rfam.full.gz', \
           twobit='{genome}/genome.2bit'
    output: '{genome}/cat.rfam.bed.gz'
    run:
        species = GENOME2SPECIES[wildcards.genome]
        with TemporaryDirectory() as tmpdir:
            shell('sh tools/build-rfam-index.sh {tmpdir} {input.rfamfasta} ' \
                  '{input.rfamfull} "{species}" {input.twobit} {output}')

rule prepare_refseq_catalog:
    input: '{genome}/downloaded/refGene.txt.gz'
    output: '{genome}/cat.refseq.bed.gz'
    shell: 'python tools/build-refseq-index.py `dirname {output}` {input}'

rule download_miRBase:
    output: '{genome}/downloaded/mirbase.gff3'
    run:
        URL = MIRBASE_URL.format(species=GENOME2SPECIES_SHORT[wildcards.genome])
        shell('wget -O {output} {URL}')

rule prepare_mirbase_catalog:
    input: '{genome}/downloaded/mirbase.gff3'
    output: '{genome}/cat.mirbase.bed.gz'
    run:
        import urllib, re, gzip

        accession_pat = re.compile('Name=([^;]*)')

        with DeleteOnError(str(output[0]), gzip.open) as out:
            for line in open(input[0]):
                if line.startswith('#'):
                    continue

                fields = line[:-1].split('\t')
                if fields[2] != 'miRNA_primary_transcript':
                    continue

                name = accession_pat.findall(fields[8])[0]
                out.write(('\t'.join([
                    fields[0], str(int(fields[3])-1), fields[4],
                    'miRNA|%s|%s' % (name, name), '.', fields[6]
                ]) + '\n').encode('utf-8'))

rule download_repeatmasker_ucsc:
    output: '{genome}/downloaded/rmsk.txt.gz'
    run:
        URL = REPEATMASKER_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {URL}')

rule prepare_repeatmasker_catalog:
    input: '{genome}/downloaded/rmsk.txt.gz'
    output: '{genome}/cat.rmsk.bed.gz'
    run:
        import gzip

        with DeleteOnError(str(output[0]), gzip.open) as out:
            for line in gzip.open(str(input[0])):
                fields = line[:-1].split(b'\t')
                if fields[12] in REPEATMASKER_IGNORE_CLASSES:
                    continue

                out.write(b'\t'.join([
                    fields[5], fields[6], fields[7],
                    fields[11] + b'|' + fields[10] + b'|' + fields[12] + b'/' + fields[10],
                    fields[1], fields[9]]) + b'\n')

rule download_trnadb_ucsc:
    output: '{genome}/downloaded/tRNAs.txt.gz'
    run:
        URL = TRNADB_URL.format(genome=wildcards.genome)
        shell('wget -O {output} {URL}')

rule prepare_trna_catalog:
    input: '{genome}/downloaded/tRNAs.txt.gz'
    output: '{genome}/cat.trnas.bed.gz'
    run:
        import re, gzip

        with DeleteOnError(str(output[0]), gzip.open) as out:
            for line in gzip.open(str(input[0])):
                fields = line[:-1].split(b'\t')
                out.write(b'\t'.join([
                    fields[1], fields[2], fields[3],
                    b'tRNA|tRNA-' + fields[7] + fields[8] + b'|tRNA-' +
                    fields[7] + fields[8],
                    fields[5], fields[6]]) + b'\n')

rule compile_full_catalog:
    input: '{genome}/cat.mirbase.bed.gz', '{genome}/cat.refseq.bed.gz', \
           '{genome}/cat.rmsk.bed.gz', '{genome}/cat.rfam.bed.gz', \
           '{genome}/cat.trnas.bed.gz'
    output: '{genome}/annotations.bed.gz'
    run:
        inputs = ' '.join(input)
        shell('zcat {inputs} | sort -k1,1 -k2,3n -k4,4 | \
               gzip -c - > {output}')

