import os
import tempfile
import shutil
import pickle
from itertools import *

{% block settings %}{% endblock %}

#---
# directories

TOP_DIR = '{( Paths.topdir )}'
RESOURCE_DIR = '{( Paths.resourcesdir )}'
TOOLS_DIR = '{( Paths.toolsdir )}'
WORK_DIR = '{( Paths.workdir )}/{( NAME )}'

#---
# internal tools

def _cmd(cmd):
    if cmd.endswith('.py'):
        return 'env PYTHONPATH="%s" %s' % (TOP_DIR, os.path.join(TOOLS_DIR, cmd))
    else:
        return cmd

{( INTERNAL_TOOLS )}

#---
# common paths
GSNAP_SPLICE_INDEX = 'resources/{species}/genome/genome.maps/genome.splicesites.iit'


class TemporaryDirectory(object):
    def __init__(self, dir='.'):
        self.dir = dir
        self.path = None

    def __enter__(self):
        self.path = tempfile.mkdtemp(dir=self.dir)
        return self.path

    def __exit__(self, type, value, traceback):
        if self.path is not None:
            shutil.rmtree(self.path)


# Sample translation tables

ALL_SAMPLES_ORDER = """{%- for name in SAMPLES -%}{(name)} {% endfor %}""".split()
ALL_SAMPLES = set(ALL_SAMPLES_ORDER)
CLIP_SAMPLES = RNAseq_SAMPLES = SNPreference_SAMPLES = set() # safeguard for unused workflows
{% for workflow in WORKFLOWS -%}
{(workflow)}_SAMPLES = set("""
{%- for sample_name, sample in SAMPLES.items() -%}
{%- if workflow in sample.workflows %}{(sample_name)} {% endif %}
{%- endfor %}""".split())
{% endfor %}

SAMPLE_SPECIES = {
{%- for sample_name, sample in SAMPLES.items() %}
    '{(sample_name)}': '{(sample.species)}',
{%- endfor %}
}

SOURCE_SPECIES = {
{%- for source, refsamples in REFERENCES.items() %}
    '{(source)}': '{(refsamples[0].species)}',
{%- endfor %}
}


# Data logic

def crossfest_determine_simulation_depth(read_depth):
    niterations = CROSSFEST_OBJECTIVE_DEPTH * 1000000000. / read_depth
    valid_niter = min(max(CROSSFEST_MINIMUM_ITERATION, niterations),
                      CROSSFEST_MAXIMUM_ITERATION)
    return int(valid_niter * read_depth / 1000000000.)


# Utility functions

def makedir(path, empty=False):
    if not os.path.isdir(path):
        os.makedirs(path)
    elif empty:
        shutil.rmtree(path)
        os.makedirs(path)

def unpickle(filename):
    # unpickle from a file, which may be pickled in Python 2.x.
    # http://stackoverflow.com/questions/11305790/pickle-incompatability-of-numpy-arrays-between-python-2-and-3

    with open(filename, 'rb') as f:
        u = pickle._Unpickler(f)
        u.encoding = 'latin1'
        return u.load()


# Fail if any intermediate process failed in pipelined commands
shell.prefix('set -e; set -o pipefail; ')
shell.executable(os.popen('which bash').read().strip()) # pipefail is supported by bash only.


{% block rules %}{% endblock %}
