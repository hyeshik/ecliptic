import os
import tempfile
import shutil
from itertools import *

#---
# tunable parameters

SNPCALL_MINIMUM_DEPTH = 20


#---
# directories

TOP_DIR = '{( Paths.topdir )}'
RESOURCE_DIR = '{( Paths.resourcesdir )}'
TOOLS_DIR = '{( Paths.toolsdir )}'
WORK_DIR = '{( Paths.workdir )}/{( NAME )}'

#---
# internal tools

_cmd = lambda cmd: 'env PYTHONPATH="%s" %s' % (TOP_DIR, os.path.join(TOOLS_DIR, cmd))
{( INTERNAL_TOOLS )}

#---
# common paths
GSNAP_SPLICE_INDEX = 'resources/{species}/genome/genome.maps/genome.splicesites.iit'


class TemporaryDirectory(object):
    def __init__(self, dir='.'):
        self.dir = dir
        self.path = None

    def __enter__(self):
        self.path = tempfile.mkdtemp(dir=self.dir)
        return self.path

    def __exit__(self, type, value, traceback):
        if self.path is not None:
            shutil.rmtree(self.path)


# Sample translation tables

ALL_SAMPLES = set("""{%- for name in SAMPLES -%}{(name)} {% endfor %}""".split())
CLIP_SAMPLES = RNAseq_SAMPLES = SNPreference_SAMPLES = set() # safeguard for unused workflows
{% for workflow in WORKFLOWS -%}
{(workflow)}_SAMPLES = set("""
{%- for sample_name, sample in SAMPLES.items() -%}
{%- if workflow in sample.workflows %}{(sample_name)} {% endif %}
{%- endfor %}""".split())
{% endfor %}

SAMPLE_SPECIES = {
{%- for sample_name, sample in SAMPLES.items() %}
    '{(sample_name)}': '{(sample.species)}',
{%- endfor %}
}

SOURCE_SPECIES = {
{%- for source, refsamples in REFERENCES.items() %}
    '{(source)}': '{(refsamples[0].species)}',
{%- endfor %}
}


{% block rules %}{% endblock %}
