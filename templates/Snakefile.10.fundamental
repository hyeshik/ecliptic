# Snakefile.10.fundamental

targets(expand('annotations/{sample}.anno.gz',
               sample=list(CLIP_SAMPLES | RNAseq_SAMPLES)) +
        expand('alignments/{sample}.split/done',
               sample=list(CLIP_SAMPLES | RNAseq_SAMPLES)))


{% for sample_name, sample in SAMPLES.items() %}

rule prepare_processed_sequences_{(sample_name|rule_name)}:
    input: "{% for acc in sample.SRAno %}original/{(acc)}.fq.gz {% endfor %}".split()
    output: "sequences/{( sample_name )}.primary.fq.gz"
    #threads: {% if sample.threep_adapter %}{( THREADS )}{% else %}2{% endif %}
    # temporarily lowered due to suspected bug in echidna
    threads: 3
    version: "1"
    shell: "zcat {input} | \
                echidna -p{threads} -c \"fastx_trimmer -Q{( sample.quality_scale )} \
                    -f {( sample.first_base )} -l {( sample.last_base )} | \
                {%- if sample.threep_adapter %}
                fastx_clipper -n -Q{( sample.quality_scale )} \
                    -a {( sample.threep_adapter )} -l {( sample.minimum_length )} | \
                {%- endif %}
                fastq_quality_filter -Q{( sample.quality_scale )} \
                    -q {( sample.quality_threshold)} -p {( sample.quality_percentage )} | \
                fastx_artifacts_filter -Q{( sample.quality_scale )}\" | \
                pigz -p4 -c - > {output}"

rule collapse_filtered_fastq_{(sample_name|rule_name)}:
    input: 'sequences/{( sample_name )}.filtered.fq.gz'
    output: 'sequences/{( sample_name )}.filtered.fa'
    version: "1"
    shell: 'zcat {input} | fastx_collapser -Q{( sample.quality_scale )} > {output}'

{% endfor %}


rule align_to_contaminants:
    input: "sequences/{sample}.primary.fq.gz"
    output: "alignments/{sample}.contaminants.sam.gz"
    threads: {( THREADS )}
    version: "1"
    run:
        species = SAMPLE_SPECIES[wildcards.sample]
        shell("gsnap -D resources/{species} --gunzip -d contaminants -B 4 -A sam -m 0.05 \
                -t {threads} {input} | gzip -c - > {output}")


rule filter_reads:
    input: "alignments/{sample}.contaminants.sam.gz"
    output: "sequences/{sample}.filtered.fq.gz"
    version: "1"
    shell: "samtools view -hSf 4 {input} | bam2fastx -qsA - | gzip -c - > {output}"


{% for source, refsamples in REFERENCES.items() %}

rule generate_reference_reads_{(source|rule_name)}:
    input: expand('sequences/{sample}.filtered.fq.gz', sample="
            {%- for sample in refsamples %}{(sample.label)} {% endfor %}".split())
    output: 'bg_variations/{(source)}.fq.gz'
    threads: {(THREADS)}
    version: "1"
    run:
        ref_fastq_files = ' '.join(input)
        shell('zcat {ref_fastq_files} | pigz -p{threads} -c - > {output}')

{% endfor %}

rule align_reference_reads_to_genome:
    input: 'bg_variations/{source}.fq.gz'
    output: 'bg_variations/{source}.bam'
    threads: {(THREADS)}
    version: "1"
    run:
        species = SOURCE_SPECIES[wildcards.source]
        splice_index = GSNAP_SPLICE_INDEX.format(species=species)
        shell('gsnap -D resources/{species} -d genome -B 4 -A sam -m 0.05 --gunzip \
                    -t {threads} --terminal-threshold=9999 -s {splice_index} {input} | \
               {SAM_MULTIHIT_RESOLVE_CMD} 2 | samtools view -bS - > {output}')

rule sort_sam:
    input: '{name}.bam'
    output: '{name}.sorted.bam'
    version: "1"
    run:
        outprefix = output[0].replace('.bam', '')
        shell('samtools sort {input} {outprefix}')

rule call_variants:
    input: 'bg_variations/{source}.sorted.bam'
    output: 'bg_variations/{source}.vcf'
    version: "1"
    run:
        species = SOURCE_SPECIES[wildcards.source]
        shell('samtools mpileup -uf resources/{species}/genome.fa {input} | \
               bcftools view -cvg - > {output}')

rule generate_gsnap_snp_index:
    input: 'bg_variations/{source}.vcf'
    output: snpout='bg_variations/genome.genomecomp.{source}.snpmap', \
            iitout=temp('bg_variations/{source}.iit')
    version: "1"
    run:
        species = SOURCE_SPECIES[wildcards.source]
        shell("vcfutils.pl varFilter -d{SNPCALL_MINIMUM_DEPTH} {input} | \
               awk -F'\t' '/^[^#]/ {{ \
                 n++; \
                 if (length($4) == 1) {{ \
                   if (length($5) > 1) {{ genotype=\"N\"; }} \
                   else {{ genotype=$5; }}; \
                   printf \">gc%d %s:%d %s%s\\n\", n, $1, $2, $4, genotype; \
                 }} \
               }}' | iit_store -o {output.iitout}")

        shell("snpindex -D resources/{species} -d genome -V bg_variations \
                -v {wildcards.source}.snpmap {output.iitout}")


{% for sample_name, sample in SAMPLES.items() %}

rule align_sample_reads_to_genome_{(sample_name|rule_name)}:
    input: fasta='sequences/{(sample_name)}.filtered.fa'
            {%- if sample.source -%}
              , snpindex='bg_variations/genome.genomecomp.{(sample.source)}.snpmap'
            {%- endif %}
    output: 'alignments/{(sample_name)}.bam'
    threads: {(THREADS)}
    version: "1"
    run:
        species = '{(sample.species)}'
        splice_index = GSNAP_SPLICE_INDEX.format(species=species)
        snp_index = '{% if sample.source %}-V bg_variations -v {(sample.source)}.snpmap {% endif %}'
        shell('gsnap -D resources/{species} -d genome -B 4 -O -A sam -m 0.1 --gunzip \
                    -t {threads} --terminal-threshold=9999 -s {splice_index} \
                    {snp_index} {input.fasta} | \
               {SAM_MULTIHIT_RESOLVE_CMD} 2 | samtools view -bS - > {output}')

{% endfor %}

rule split_alignments_by_chromosome:
    input: 'alignments/{sample}.bam'
    output: 'alignments/{sample}.split/done'
    version: "1"
    run:
        outputdir = os.path.dirname(output[0])
        makedir(outputdir, empty=True)
        shell('bamtools split -in {input} -reference -stub "{outputdir}/" -refPrefix ""')

        import glob
        for path in glob.glob(os.path.join(outputdir, '.*.bam')):
            newpath = os.path.join(os.path.dirname(path), os.path.basename(path)[1:])
            os.rename(path, newpath)

        open(output[0], 'w').close()


rule annotate_reads:
    input: 'alignments/{sample}.bam'
    output: 'annotations/{sample}.bedintersect.gz'
    threads: 2
    version: "1"
    run:
        species = SAMPLE_SPECIES[wildcards.sample]
        shell('bedtools intersect -bed -abam {input} \
                 -b resources/{species}/annotations.bed.gz -wa -wb | \
               gzip -c - > {output}')


rule summarize_annotation:
    input: bam='alignments/{sample}.bam', \
           bedintersect='annotations/{sample}.bedintersect.gz'
    output: 'annotations/{sample}.anno.gz'
    threads: 2
    version: "1"
    run:
        species = SAMPLE_SPECIES[wildcards.sample]
        shell('{SUMMARIZE_ANNOTATIONS_CMD} {input.bam} {input.bedintersect} | \
               gzip -c - > {output}')

